" vim: set foldmethod=marker foldlevel=0:
" ============================================================================
" .vimrc of Elliott Pogue {{{

let s:darwin = has('mac')

" }}}
" ============================================================================
" VIM-PLUG BLOCK {{{
" ============================================================================ 

silent! if plug#begin('~/.vim/plugged')

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.sh
  endif
endfunction

" Color
Plug 'joshdick/onedark.vim'
Plug 'chriskempson/base16-vim'

" Git
Plug 'tpope/vim-fugitive'
if v:version >= 703
  Plug 'mhinz/vim-signify'            " Git status in gutter
endif

" Edit
Plug 'junegunn/vim-easy-align',       { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] } " Auto-align delimiters
Plug 'Raimondi/delimitMate'           " Auto-match tags
Plug 'tpope/vim-endwise'              " Auto-insert end delimiter in Ruby
Plug 'tpope/vim-commentary'           " Commenting lines
Plug 'tpope/vim-surround'             " The best plugin ever
Plug 'editorconfig/editorconfig-vim'  " Parse .editorconfig files
Plug 'kana/vim-textobj-user'          " Create your own text objects
Plug 'austintaylor/vim-indentobject'  " Adds an indent object (i) for motions

" Lang
Plug 'sheerun/vim-polyglot'           " Autoload syntaxes
Plug 'styled-components/vim-styled-components' " styled-components syntax
Plug 'w0rp/ale'                       " Async linting
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }           " Autocompletion
Plug 'Shougo/neco-syntax'             " Syntax-based autocompletion source
Plug 'wokalski/autocomplete-flow'     " Flow autocompletion source
Plug 'mhartington/nvim-typescript'    " TypeScript autocompletion source
Plug 'Shougo/neosnippet.vim'          " Snippets
Plug 'Shougo/neosnippet-snippets'     " Default snippets
Plug 'sbdchd/neoformat'                   " Formatting
Plug 'tpope/vim-rails'                    " Rails-specific features
Plug 'thoughtbot/vim-rspec'               " Quick access to RSpec runners
Plug 'Glench/Vim-Jinja2-Syntax'           " Liquid syntax highlighting
Plug 'mattn/emmet-vim'                    " Emmet features
if s:darwin
  Plug 'rizzatti/dash.vim'                " Dash integration
endif
Plug 'c-brenn/phoenix.vim'                " Phoenix-specific features
Plug 'slashmili/alchemist.vim'            " Elixir language server

" Browsing
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }   " Awesome runner interface
Plug 'junegunn/fzf.vim'                                             " CtrlP replacement
Plug 'scrooloose/nerdtree'                                          " File browser
Plug 'Xuyuanp/nerdtree-git-plugin'                                  " Git integration for Nerdtree
Plug 'justinmk/vim-gtfo'                                            " Open Finder
Plug 'duggiefresh/vim-easydir'                                      " Create files and directories
Plug 'tpope/vim-projectionist'                                      " Manage language-specific conventions

" Other
Plug 'christoomey/vim-tmux-navigator'                               " Seamlessly navigate between tmux splits and vim splits
if s:darwin
  Plug 'tpope/vim-eunuch'                                           " UNIX command helpers (:Rename, :Move, :Chmod, etc.)
endif
Plug 'vim-scripts/matchit.zip'                                      " Extend % matching for (X)HTML
Plug 'vim-airline/vim-airline'                                      " Status bar
Plug 'vim-airline/vim-airline-themes'                               " Prettier status bar
Plug 'tpope/vim-obsession'                                          " Session files for project-like management
Plug 'tpope/vim-repeat'                                             " Repeat custom commands

call plug#end()
endif

" }}}
" ============================================================================
" BASIC SETTINGS {{{
" =============================================================================

let mapleader = ' '
let maplocalleader = ' '

set nu
set autoindent
set smartindent
set lazyredraw
set laststatus=2                              " Always display the status line
set showcmd
" set clipboard=unnamed                       " Use system clipboard
set visualbell
set backspace=indent,eol,start
" set ttimeout
set timeoutlen=500
" set ttimeoutlen=0
set textwidth=80
" set colorcolumn=+1
set hlsearch                                  " Highlight searches
set incsearch
set ignorecase smartcase
set wildmenu
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmode=longest,list,full
set tabstop=2
set shiftwidth=2
set expandtab smarttab
set scrolloff=5                               " Always maintain 5 lines of scroll offset
silent! set encoding=utf-8
set list                                      " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set virtualedit=block
set nojoinspaces
set noswapfile                                " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set ruler                                     " show the cursor position all the time
set showcmd                                   " display incomplete commands
set nowrap
set linebreak                                 " breaks lines at reasonable locations
set completeopt=menuone,preview,longest

set mouse=a
if exists('$TMUX') && !has('nvim')  " Support resizing in tmux
  set ttymouse=xterm2
endif

if has('patch-7.4.338')
  let &showbreak = '↳ '
  set breakindent
  set breakindentopt=sbr
endif

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
  set termguicolors
endif

syntax on
colorscheme onedark

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" }}}
" ============================================================================
" MAPPINGS {{{
" ============================================================================

noremap <C-F> <C-D>
noremap <C-B> <C-U>

" omni-completion
inoremap <Nul> <C-x><C-o>

" Save
inoremap <C-s>      <C-O>:update<cr>
nnoremap <C-s>      :update<cr>
nnoremap <leader>s  :update<cr>

" Disable CTRL-A on tmux or on screen
if $TERM =~ 'screen'
  nnoremap <C-a> <nop>
  nnoremap <Leader><C-a> <C-a>
endif

" Quit
inoremap <C-Q>     <esc>:q<cr>
nnoremap <C-Q>     :q<cr>
vnoremap <C-Q>     <esc>
nnoremap <Leader>q :q<cr>
nnoremap <Leader>Q :qa!<cr>

" Tag stack
nnoremap g[ :pop<cr>

" Escaping!
inoremap fd <Esc>
nnoremap fd <Esc>
vnoremap fd <Esc>
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap fd <C-\><C-n>
endif

inoremap <C-c> <Esc>
xnoremap <C-c> <Esc>

" Movement between splits and tmux panes
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
if has("nvim")
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Switch between the last two files
nnoremap <Leader><Leader> <c-^>

" Make Y behave like other capitals
nnoremap Y y$

" Put should autoindent
nnoremap p p=`]

" qq to record, Q to replay
nmap Q @q

" System pasteboard mappings
nnoremap <Leader>y "*y
nnoremap <Leader>yy "*Y

nnoremap <Leader>p :set paste<CR>:put *<CR>:set nopaste<CR>

" Search for visual selection
vnoremap // y/<C-R>"<CR>

" Go to or create file
map <leader>gf :vsplit <cfile><cr>

" ----------------------------------------------------------------------------
" Moving lines
" ----------------------------------------------------------------------------
" nnoremap <silent> <C-k> :move-2<cr>
" nnoremap <silent> <C-j> :move+<cr>
" nnoremap <silent> <C-h> <<
" nnoremap <silent> <C-l> >>
" xnoremap <silent> <C-k> :move-2<cr>gv
" xnoremap <silent> <C-j> :move'>+<cr>gv
" xnoremap <silent> <C-h> <gv
" xnoremap <silent> <C-l> >gv
" xnoremap < <gv
" xnoremap > >gv

" ----------------------------------------------------------------------------
" Readline-style key bindings in command-line (excerpt from rsi.vim)
" ----------------------------------------------------------------------------
cnoremap        <C-A> <Home>
cnoremap        <C-B> <Left>
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\<Lt>Right>"
cnoremap        <M-b> <S-Left>
cnoremap        <M-f> <S-Right>
silent! exe "set <S-Left>=\<Esc>b"
silent! exe "set <S-Right>=\<Esc>f"

" ----------------------------------------------------------------------------
" #gi / #gpi | go to next/previous indentation level
" ----------------------------------------------------------------------------
function! s:go_indent(times, dir)
  for _ in range(a:times)
    let l = line('.')
    let x = line('$')
    let i = s:indent_len(getline(l))
    let e = empty(getline(l))

    while l >= 1 && l <= x
      let line = getline(l + a:dir)
      let l += a:dir
      if s:indent_len(line) != i || empty(line) != e
        break
      endif
    endwhile
    let l = min([max([1, l]), x])
    execute 'normal! '. l .'G^'
  endfor
endfunction
nnoremap <silent> gi :<c-u>call <SID>go_indent(v:count1, 1)<cr>
nnoremap <silent> gpi :<c-u>call <SID>go_indent(v:count1, -1)<cr>


" }}}
" ============================================================================
" PLUGINS {{{
" ============================================================================

" ----------------------------------------------------------------------------
" vim-commentary
" ----------------------------------------------------------------------------
map  gc  <Plug>Commentary
nmap gcc <Plug>CommentaryLine

" ----------------------------------------------------------------------------
" NERDTree
" ----------------------------------------------------------------------------
nnoremap <Leader>k :NERDTreeToggle<cr>
nnoremap <Leader>f :NERDTreeFind<cr>

let NERDTreeShowHidden = 1

" autoquit if only nerdtree is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ----------------------------------------------------------------------------
" vim-fugitive
" ----------------------------------------------------------------------------
nmap     <Leader>gs :Gstatus<CR>gg<c-n>
nnoremap <Leader>gd :Gdiff<CR>

" ----------------------------------------------------------------------------
" Deoplete
" ----------------------------------------------------------------------------
let g:deoplete#enable_at_startup = 1

" ----------------------------------------------------------------------------
" Neosnippets
" ----------------------------------------------------------------------------
" SuperTab like snippets' behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
  \ neosnippet#expandable_or_jumpable() ?
  \    "\<Plug>(neosnippet_expand_or_jump)" :
  \     pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" ----------------------------------------------------------------------------
" dash.vim
" ----------------------------------------------------------------------------
nmap     <Leader>d <Plug>DashSearch

" ----------------------------------------------------------------------------
" matchit.vim
" ----------------------------------------------------------------------------
runtime macros/matchit.vim

" ----------------------------------------------------------------------------
" Airline
" ----------------------------------------------------------------------------

let g:airline_theme = 'onedark'
let g:airline_powerline_fonts = 0
let g:airline_left_sep=''
let g:airline_left_alt_sep = '|'
let g:airline_right_sep=''
let g:airline_right_alt_sep = '|'


" ----------------------------------------------------------------------------
" FZF
" ----------------------------------------------------------------------------

" let g:fzf_layout = { 'window': '40sp' }
" let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" Keybindings
nnoremap <silent> <Leader>t :Files<cr>
nnoremap <silent> <Leader>b :Buffers<cr>
nnoremap <silent> <Leader>. :Tags<cr>
nnoremap <silent> <Leader>\ :Ag<cr>

" command! -bang -nargs=* Find
"   \ call fzf#vim#grep('rg --column --line-number --no-heading --color=always '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)


" ----------------------------------------------------------------------------
" neoterm config
" ----------------------------------------------------------------------------

let g:neoterm_position = 'horizontal'
let g:neoterm_automap_keys = ',tt'

nnoremap <silent> ,rt :call neoterm#test#run('all')<cr>
nnoremap <silent> ,rf :call neoterm#test#run('file')<cr>
nnoremap <silent> ,rn :call neoterm#test#run('current')<cr>
nnoremap <silent> ,rr :call neo" Useful maps

" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
" kills the current job (send a <c-c>)
nnoremap <silent> ,tc :call neoterm#kill()<cr>term#test#rerun()<cr>

" ----------------------------------------------------------------------------
" <Enter> | vim-easy-align
" ----------------------------------------------------------------------------
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|>' },
\ '\': { 'pattern': '\\' },
\ '/': { 'pattern': '//\+\|/\*\|\*/', 'delimiter_align': 'l', 'ignore_groups': ['!Comment'] },
\ ']': {
\     'pattern':       '[[\]]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ ')': {
\     'pattern':       '[()]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ 'f': {
\     'pattern': ' \(\S\+(\)\@=',
\     'left_margin': 0,
\     'right_margin': 0
\   },
\ 'd': {
\     'pattern': ' \(\S\+\s*[;=]\)\@=',
\     'left_margin': 0,
\     'right_margin': 0
\   }
\ }

" Start interactive EasyAlign in visual mode
xmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign with a Vim movement
nmap ga <Plug>(EasyAlign)

" ----------------------------------------------------------------------------
" delimitMate
" ----------------------------------------------------------------------------
let delimitMate_expand_cr = 1
let delimitMate_jump_expansion = 0
let delimitMate_balance_matchpairs=1

" ----------------------------------------------------------------------------
" nerdtree-git-plugin
" ----------------------------------------------------------------------------
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "?",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "=",
    \ "Deleted"   : "x",
    \ "Dirty"     : "M",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" }}}
" ============================================================================
" FUNCTIONS & COMMANDS {{{
" ============================================================================

" ----------------------------------------------------------------------------
" Todo
" ----------------------------------------------------------------------------
function! s:todo() abort
  let entries = []
  for cmd in ['git grep -n -e TODO -e FIXME -e XXX 2> /dev/null',
            \ 'grep -rn -e TODO -e FIXME -e XXX * 2> /dev/null']
    let lines = split(system(cmd), '\n')
    if v:shell_error != 0 | continue | endif
    for line in lines
      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
    endfor
    break
  endfor

  if !empty(entries)
    call setqflist(entries)
    copen
  endif
endfunction
command! Todo call s:todo()

" }}}
" ============================================================================
" AUTOCMD {{{
" ============================================================================

augroup vimrc
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.kit set filetype=html

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-

  " Run Neoformat on save
  autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx Neoformat

  " Autobalance when resized
  " autocmd VimResized * :wincmd =
augroup END

" }}}
" ============================================================================
