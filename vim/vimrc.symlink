" vim: set foldmethod=marker foldlevel=0:
" ============================================================================
" .vimrc of Elliott Pogue {{{

let s:darwin = has('mac')

" }}}
" ============================================================================
" VIM-PLUG BLOCK {{{
" ============================================================================ 

silent! if plug#begin('~/.vim/plugged')

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.sh
  endif
endfunction

" Color
Plug 'altercation/vim-colors-solarized'
Plug 'reedes/vim-colors-pencil'
Plug 'joshdick/onedark.vim'

" Git
Plug 'tpope/vim-fugitive'
if v:version >= 703
  Plug 'mhinz/vim-signify'
endif

" Edit
Plug 'junegunn/vim-easy-align',       { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'editorconfig/editorconfig-vim'
Plug 'austintaylor/vim-indentobject'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Lang
Plug 'sheerun/vim-polyglot'
Plug 'neomake/neomake'
Plug 'alvan/vim-closetag'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-rails'
Plug 'thoughtbot/vim-rspec'
Plug 'kana/vim-textobj-user'
Plug 'Glench/Vim-Jinja2-Syntax'           " For liquid
if s:darwin
  Plug 'rizzatti/dash.vim'
endif
Plug 'c-brenn/phoenix.vim'
Plug 'tpope/vim-projectionist'
Plug 'slashmili/alchemist.vim'

" Browsing
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
if v:version >= 703
  Plug 'majutsushi/tagbar'
endif
Plug 'justinmk/vim-gtfo'
Plug 'duggiefresh/vim-easydir'
Plug 'vim-scripts/Rename'
Plug 'tpope/vim-projectionist'

" Other
Plug 'kassio/neoterm'
Plug 'pbrisbin/vim-mkdir'
if s:darwin
  Plug 'tpope/vim-eunuch'
endif
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-scripts/ctags.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'bling/vim-airline'
" Plug 'bling/vim-bufferline'

call plug#end()
endif

" }}}
" ============================================================================
" BASIC SETTINGS {{{
" =============================================================================

let mapleader = ' '
let maplocalleader = ' '

set nu
set autoindent
set smartindent
set lazyredraw
set laststatus=2                              " Always display the status line
set showcmd
" set clipboard=unnamed                       " Use system clipboard
set visualbell
set backspace=indent,eol,start
" set ttimeout
set timeoutlen=500
" set ttimeoutlen=0
" set colorcolumn=80
set hlsearch                                  " Highlight searches
set incsearch
set ignorecase smartcase
set wildmenu
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmode=longest,list,full
set tabstop=2
set shiftwidth=2
set expandtab smarttab
set scrolloff=5                               " Always maintain 5 lines of scroll offset
silent! set encoding=utf-8
set list                                      " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set virtualedit=block
set nojoinspaces
set noswapfile                                " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set ruler                                     " show the cursor position all the time
set showcmd                                   " display incomplete commands
set nowrap
set linebreak                                 " breaks lines at reasonable locations
set completeopt=menuone,preview,longest

set mouse=a
if exists('$TMUX') && !has('nvim')  " Support resizing in tmux
  set ttymouse=xterm2
endif

if has('patch-7.4.338')
  let &showbreak = '↳ '
  set breakindent
  set breakindentopt=sbr
endif

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" set wildmode=list:longest,list:full

" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.dotfiles/vim/.vim-spell-en.utf-8.add

let g:onedark_termcolors = 16
if has('gui_running')
  let g:onedark_termcolors = 256
endif

syntax on
silent! colo onedark
set background=dark

" Fix strange sign column color in Solarized
" augroup colorupdate
"   autocmd!
"   autocmd VimEnter,ColorScheme * hi! link SignColumn LineNr
" augroup END

" FIX: PluginUpdate => git pull: git-sh-setup: No such file or directory 
" in MacVim (OK in non-GUI version of Vim)
if has('gui_macvim')
  set shell=/bin/zsh\ -l
endif

if has('gui_running')
  set guifont=Operator Mono SSm:h13
  " disable left and right scrollbars
  set guioptions-=r guioptions-=L
endif

" For MacVim
set noimd
set imi=1
set ims=-1

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Highlight long lines
" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" }}}
" ============================================================================
" MAPPINGS {{{
" ============================================================================

noremap <C-F> <C-D>
noremap <C-B> <C-U>

" Save
inoremap <C-s>      <C-O>:update<cr>
nnoremap <C-s>      :update<cr>
nnoremap <leader>s  :update<cr>

" Disable CTRL-A on tmux or on screen
if $TERM =~ 'screen'
  nnoremap <C-a> <nop>
  nnoremap <Leader><C-a> <C-a>
endif

" Quit
inoremap <C-Q>     <esc>:q<cr>
nnoremap <C-Q>     :q<cr>
vnoremap <C-Q>     <esc>
nnoremap <Leader>q :q<cr>
nnoremap <Leader>Q :qa!<cr>

" Tag stack
nnoremap g[ :pop<cr>

" Tagbar
if v:version >= 703
  inoremap <F8> <esc>:TagbarToggle<CR>
  nnoremap <F8> :TagbarToggle<CR>
  let g:tagbar_sort = 0
endif

" Escaping!
inoremap fd <Esc>
nnoremap fd <Esc>
vnoremap fd <Esc>
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap fd <C-\><C-n>
endif

inoremap <C-c> <Esc>
xnoremap <C-c> <Esc>

" Movement in insert mode
inoremap <C-h> <C-o>h
inoremap <C-l> <C-o>a
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-^> <C-o><C-^>

" Quicker mappings for moving between panes
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
if has('nvim')
  tnoremap <C-w>h <C-\><C-n><C-w>h
  tnoremap <C-w>j <C-\><C-n><C-w>j
  tnoremap <C-w>k <C-\><C-n><C-w>k
  tnoremap <C-w>l <C-\><C-n><C-w>l
  tnoremap <A-h> <C-\><C-n><C-w>h
  tnoremap <A-j> <C-\><C-n><C-w>j
  tnoremap <A-k> <C-\><C-n><C-w>k
  tnoremap <A-l> <C-\><C-n><C-w>l
endif

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Switch between the last two files
nnoremap <Leader><Leader> <c-^>

" Make Y behave like other capitals
nnoremap Y y$

" Put should autoindent
nnoremap p p=`]

" qq to record, Q to replay
nmap Q @q

" System pasteboard mappings
nnoremap <Leader>y "*y
nnoremap <Leader>yy "*Y

nnoremap <Leader>p :set paste<CR>:put *<CR>:set nopaste<CR>

" Search for visual selection
vnoremap // y/<C-R>"<CR>

" Go to or create file
map <leader>gf :vsplit <cfile><cr>

" ----------------------------------------------------------------------------
" <tab> / <s-tab> / <c-v><tab> | super-duper-tab
" ----------------------------------------------------------------------------
function! s:can_complete(func, prefix)
  if empty(a:func) || call(a:func, [1, '']) < 0
    return 0
  endif
  let result = call(a:func, [0, matchstr(a:prefix, '\k\+$')])
  return !empty(type(result) == type([]) ? result : result.words)
endfunction

function! s:super_duper_tab(k, o)
  if pumvisible()
    return a:k
  endif

  let line = getline('.')
  let col = col('.') - 2
  if line[col] !~ '\k\|[/~.]'
    return a:o
  endif

  let prefix = expand(matchstr(line[0:col], '\S*$'))
  if prefix =~ '^[~/.]'
    return "\<c-x>\<c-f>"
  endif
  if s:can_complete(&omnifunc, prefix)
    return "\<c-x>\<c-o>"
  endif
  if s:can_complete(&completefunc, prefix)
    return "\<c-x>\<c-u>"
  endif
  return a:k
endfunction

if has_key(g:plugs, 'ultisnips')
  " UltiSnips will be loaded only when tab is first pressed in insert mode
  if !exists(':UltiSnipsEdit')
    inoremap <silent> <Plug>(tab) <c-r>=plug#load('ultisnips')?UltiSnips#ExpandSnippet():''<cr>
    imap <tab> <Plug>(tab)
  endif

  let g:SuperTabMappingForward  = "<tab>"
  let g:SuperTabMappingBackward = "<s-tab>"
  function! SuperTab(m)
    return s:super_duper_tab(a:m == 'n' ? "\<c-n>" : "\<c-p>",
                           \ a:m == 'n' ? "\<tab>" : "\<s-tab>")
  endfunction
else
  inoremap <expr> <tab>   <SID>super_duper_tab("\<c-n>", "\<tab>")
  inoremap <expr> <s-tab> <SID>super_duper_tab("\<c-p>", "\<s-tab>")
endif

" ----------------------------------------------------------------------------
" Moving lines
" ----------------------------------------------------------------------------
" nnoremap <silent> <C-k> :move-2<cr>
" nnoremap <silent> <C-j> :move+<cr>
" nnoremap <silent> <C-h> <<
" nnoremap <silent> <C-l> >>
" xnoremap <silent> <C-k> :move-2<cr>gv
" xnoremap <silent> <C-j> :move'>+<cr>gv
" xnoremap <silent> <C-h> <gv
" xnoremap <silent> <C-l> >gv
" xnoremap < <gv
" xnoremap > >gv

" ----------------------------------------------------------------------------
" Readline-style key bindings in command-line (excerpt from rsi.vim)
" ----------------------------------------------------------------------------
cnoremap        <C-A> <Home>
cnoremap        <C-B> <Left>
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-F> getcmdpos()>strlen(getcmdline())?&cedit:"\<Lt>Right>"
cnoremap        <M-b> <S-Left>
cnoremap        <M-f> <S-Right>
silent! exe "set <S-Left>=\<Esc>b"
silent! exe "set <S-Right>=\<Esc>f"

" ----------------------------------------------------------------------------
" #gi / #gpi | go to next/previous indentation level
" ----------------------------------------------------------------------------
function! s:go_indent(times, dir)
  for _ in range(a:times)
    let l = line('.')
    let x = line('$')
    let i = s:indent_len(getline(l))
    let e = empty(getline(l))

    while l >= 1 && l <= x
      let line = getline(l + a:dir)
      let l += a:dir
      if s:indent_len(line) != i || empty(line) != e
        break
      endif
    endwhile
    let l = min([max([1, l]), x])
    execute 'normal! '. l .'G^'
  endfor
endfunction
nnoremap <silent> gi :<c-u>call <SID>go_indent(v:count1, 1)<cr>
nnoremap <silent> gpi :<c-u>call <SID>go_indent(v:count1, -1)<cr>

" ----------------------------------------------------------------------------
" quick grep
" ----------------------------------------------------------------------------
" command! -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!


" }}}
" ============================================================================
" PLUGINS {{{
" ============================================================================

" ----------------------------------------------------------------------------
" vim-commentary
" ----------------------------------------------------------------------------
map  gc  <Plug>Commentary
nmap gcc <Plug>CommentaryLine

" ----------------------------------------------------------------------------
" NERDTree
" ----------------------------------------------------------------------------
nnoremap <Leader>k :NERDTreeToggle<cr>
nnoremap <Leader>f :NERDTreeFind<cr>

let NERDTreeShowHidden = 1

" ----------------------------------------------------------------------------
" vim-fugitive
" ----------------------------------------------------------------------------
nmap     <Leader>gs :Gstatus<CR>gg<c-n>
nnoremap <Leader>gd :Gdiff<CR>

" ----------------------------------------------------------------------------
" Neomake
" ----------------------------------------------------------------------------
autocmd! BufWritePost * Neomake

" ----------------------------------------------------------------------------
" dash.vim
" ----------------------------------------------------------------------------
nmap     <Leader>d <Plug>DashSearch

" ----------------------------------------------------------------------------
" matchit.vim
" ----------------------------------------------------------------------------
runtime macros/matchit.vim

" ----------------------------------------------------------------------------
" Airline
" ----------------------------------------------------------------------------

let g:airline_theme='onedark'
let g:airline_powerline_fonts = 0
let g:airline_left_sep=''
let g:airline_left_alt_sep = '|'
let g:airline_right_sep=''
let g:airline_right_alt_sep = '|'

" ----------------------------------------------------------------------------
" Bufferline
" ----------------------------------------------------------------------------
" let g:bufferline_echo = 0
" autocmd VimEnter *
"   \ let &statusline='%{bufferline#refresh_status()}'
"     \ .bufferline#get_status_string()

" ----------------------------------------------------------------------------
" Ctrl-P
" ----------------------------------------------------------------------------

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
" if executable('ag')
  " Use Ag over Grep
  " set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " let g:ctrlp_user_command = 'ag %s -l --ignore .git --ignore .ctrlp --nocolor --hidden -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  " let g:ctrlp_use_caching = 0
" endif

" Speed up CtrlP matching
" let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

" Use .ctrlp root markers
" let g:ctrlp_root_markers = ['.ctrlp']

" Let Ctrl-P override NERD window
" let g:ctrlp_reuse_window = 'NERD_tree_1'

" Ctrl-P mappings
" nnoremap <Leader>t :CtrlP<cr>
" nnoremap <Leader>b :CtrlPBuffer<cr>
" nnoremap <Leader>. :CtrlPTag<cr>

" ----------------------------------------------------------------------------
" FZF
" ----------------------------------------------------------------------------

" let g:fzf_layout = { 'window': '40sp' }
" let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" Keybindings
nnoremap <silent> <Leader>t :Files<cr>
nnoremap <silent> <Leader>b :Buffers<cr>
nnoremap <silent> <Leader>. :Tags<cr>
nnoremap <silent> <Leader>\ :Ag<cr>


" ----------------------------------------------------------------------------
" neoterm config
" ----------------------------------------------------------------------------

let g:neoterm_position = 'horizontal'
let g:neoterm_automap_keys = ',tt'

nnoremap <silent> ,rt :call neoterm#test#run('all')<cr>
nnoremap <silent> ,rf :call neoterm#test#run('file')<cr>
nnoremap <silent> ,rn :call neoterm#test#run('current')<cr>
nnoremap <silent> ,rr :call neo" Useful maps

" hide/close terminal
nnoremap <silent> ,th :call neoterm#close()<cr>
" clear terminal
nnoremap <silent> ,tl :call neoterm#clear()<cr>
" kills the current job (send a <c-c>)
nnoremap <silent> ,tc :call neoterm#kill()<cr>term#test#rerun()<cr>

" ----------------------------------------------------------------------------
" <Enter> | vim-easy-align
" ----------------------------------------------------------------------------
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|>' },
\ '\': { 'pattern': '\\' },
\ '/': { 'pattern': '//\+\|/\*\|\*/', 'delimiter_align': 'l', 'ignore_groups': ['!Comment'] },
\ ']': {
\     'pattern':       '[[\]]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ ')': {
\     'pattern':       '[()]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ 'f': {
\     'pattern': ' \(\S\+(\)\@=',
\     'left_margin': 0,
\     'right_margin': 0
\   },
\ 'd': {
\     'pattern': ' \(\S\+\s*[;=]\)\@=',
\     'left_margin': 0,
\     'right_margin': 0
\   }
\ }

" Start interactive EasyAlign in visual mode
xmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign with a Vim movement
nmap ga <Plug>(EasyAlign)

" ----------------------------------------------------------------------------
" delimitMate
" ----------------------------------------------------------------------------
let delimitMate_expand_cr = 1
let delimitMate_jump_expansion = 0
let delimitMate_balance_matchpairs=1

" ----------------------------------------------------------------------------
" nerdtree-git-plugin
" ----------------------------------------------------------------------------
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "?",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "=",
    \ "Deleted"   : "x",
    \ "Dirty"     : "M",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

" }}}
" ============================================================================
" FUNCTIONS & COMMANDS {{{
" ============================================================================

" ----------------------------------------------------------------------------
" Todo
" ----------------------------------------------------------------------------
function! s:todo() abort
  let entries = []
  for cmd in ['git grep -n -e TODO -e FIXME -e XXX 2> /dev/null',
            \ 'grep -rn -e TODO -e FIXME -e XXX * 2> /dev/null']
    let lines = split(system(cmd), '\n')
    if v:shell_error != 0 | continue | endif
    for line in lines
      let [fname, lno, text] = matchlist(line, '^\([^:]*\):\([^:]*\):\(.*\)')[1:3]
      call add(entries, { 'filename': fname, 'lnum': lno, 'text': text })
    endfor
    break
  endfor

  if !empty(entries)
    call setqflist(entries)
    copen
  endif
endfunction
command! Todo call s:todo()

" }}}
" ============================================================================
" AUTOCMD {{{
" ============================================================================

augroup vimrc
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile *.kit set filetype=html

  " Enable spellchecking for Markdown
  autocmd FileType markdown setlocal spell

  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md setlocal textwidth=80

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-

  " Autobalance when resized
  " autocmd VimResized * :wincmd =
augroup END

" }}}
" ============================================================================
